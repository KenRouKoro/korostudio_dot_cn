---
import { getLanguageName } from "@utils/i18n-utils";
import { Icon } from "astro-icon/components";
import { siteConfig } from "@/config";

// 将支持的语言列表传递给客户端脚本
const supportedLangsJson = JSON.stringify(
	siteConfig.supportedLangs || ["zh_cn", "en"],
);

interface Props {
	currentUrl?: string;
}

const { currentUrl } = Astro.props;
const currentPath = currentUrl || Astro.url.pathname;

// 从URL中提取当前语言
function getCurrentLanguage(path: string): string {
	const match = path.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
	if (match && siteConfig.supportedLangs?.includes(match[1])) {
		return match[1];
	}
	return siteConfig.defaultLang || "zh_cn";
}

const currentLang = getCurrentLanguage(currentPath);
const supportedLangs = siteConfig.supportedLangs || ["zh_cn", "en"];

// 如果只有一种语言或者禁用了语言切换器，不显示
const shouldShow = siteConfig.showLanguageSwitcher && supportedLangs.length > 1;
---

<!-- 隐藏的数据元素，用于传递支持的语言列表给客户端脚本 -->
<script type="application/json" id="supported-langs-data" style="display: none;">{supportedLangsJson}</script>

{shouldShow && (
	<div class="relative z-50" role="menu" tabindex="-1" id="global-language-switcher">
		<button 
			aria-label="Language Switcher" 
			role="menuitem" 
			class="btn-plain scale-animation h-11 px-3 active:scale-90 flex items-center gap-1" 
			id="lang-trigger"
		>
			<Icon name="material-symbols:language" class="text-[1.25rem]" />
			<span class="lang-text text-sm font-medium hidden sm:inline">{getLanguageName(currentLang)}</span>
			<Icon name="material-symbols:keyboard-arrow-down" class="text-[1rem] hidden sm:inline" />
		</button>
		<div 
			id="lang-dropdown" 
			class="hidden absolute transition float-panel-closed top-11 -right-2 pt-5"
		>
			<div class="card-base float-panel p-2 min-w-[140px]">
				{supportedLangs.map(lang => {
			const isActive = lang === currentLang;
			return (
				<a 
					href="#"
					class:list={[
						"btn-plain scale-animation h-10 px-4 w-full justify-start active:scale-95 text-base whitespace-nowrap min-w-[120px]",
						{ "text-[var(--primary)] font-medium": isActive }
					]}
					title={`切换到${getLanguageName(lang)}`}
					role="menuitem"
					data-lang-switch={lang}
				>
					{getLanguageName(lang)}
				</a>
			);
		})}
			</div>
		</div>
	</div>
)}



<script>
	// 导入需要的函数（客户端版本）
	import { getDynamicLanguageSwitchUrl, switchLanguageWithFallback } from "@utils/i18n-utils";

	// Posts路径检测和同语言跳转函数
	function isPostsPath(url: string): boolean {
		// 使用正则表达式匹配包含posts的路径
		// 匹配 /posts/... 或 /lang/posts/... 格式
		const postsPathRegex = /^\/(\w+\/)?posts\//;
		return postsPathRegex.test(url);
	}

	function extractLangFromUrl(url: string): string {
		const supportedLangs = ['zh_cn', 'en', 'ja', 'ko', 'es', 'th', 'vi', 'id', 'tr', 'zh_tw', 'ru'];
		const match = url.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		if (match && supportedLangs.includes(match[1])) {
			return match[1];
		}
		return 'zh_cn'; // 默认语言
	}

	function isDefaultLanguage(lang: string): boolean {
		return lang === 'zh_cn';
	}

	function getPostUrl(slug: string, lang?: string): string {
		// 清理slug，移除文件扩展名和语言后缀
		let cleanSlug = slug;
		// 移除 .md, .en.md 等扩展名
		cleanSlug = cleanSlug.replace(/\.(\w+\.)?md$/, "");
		// 移除 index.en, index.zh_cn 等文件名
		cleanSlug = cleanSlug.replace(/\/index(\.\w+)?$/, "");

		// 通用的语言后缀清理逻辑
		const supportedLangs = ['en', 'ja', 'ko', 'es', 'th', 'vi', 'id', 'tr', 'zh_tw', 'ru'];
		for (const supportedLang of supportedLangs) {
			// 移除形如 indexen, indexja, guideen, guideja 等语言后缀
			cleanSlug = cleanSlug.replace(
				new RegExp(`(index|[^/]+)(${supportedLang})$`, "i"),
				"$1",
			);
		}

		// 移除形如 indexru, guideen 等剩余的语言后缀（通用模式）
		cleanSlug = cleanSlug.replace(/index[a-z]{2}$/i, "");
		// 移除末尾的 /index
		cleanSlug = cleanSlug.replace(/\/index$/, "");
		// 如果整个 slug 就是 index，则设为空字符串
		if (cleanSlug === "index") {
			cleanSlug = "";
		}
		// 移除开头和结尾的斜杠
		cleanSlug = cleanSlug.replace(/^\/+|\/+$/g, "");

		// 根据语言参数生成URL
		if (!lang || isDefaultLanguage(lang)) {
			return `/posts/${cleanSlug}`;
		}

		return `/${lang}/posts/${cleanSlug}`;
	}

	function getPostsSameLangTextUrl(currentUrl: string, targetLang: string): string {
		// 提取当前语言和文章slug
		const currentLang = extractLangFromUrl(currentUrl);
		
		// 移除当前语言前缀，获取纯净的路径
		let cleanUrl = currentUrl;
		if (!isDefaultLanguage(currentLang)) {
			cleanUrl = currentUrl.replace(new RegExp(`^\/${currentLang}(?:\/|$)`), "/");
		}
		
		// 确保是posts路径
		if (!isPostsPath(cleanUrl)) {
			// 如果不是posts路径，回退到原有逻辑
			return cleanUrl;
		}
		
		// 提取文章slug
		const slugMatch = cleanUrl.match(/^\/posts\/(.+)$/);
		if (!slugMatch) {
			// 如果无法提取slug，回退到归档页面
			return targetLang === 'zh_cn' ? '/archive' : `/${targetLang}/archive`;
		}
		
		const slug = slugMatch[1];
		
		// 构建目标语言的文章URL
		return getPostUrl(slug, targetLang);
	}

	// 检测当前路径是否为archive页面
	function isArchivePath(url: string): boolean {
		const archivePathRegex = /^\/(\w+\/)?archive$/;
		return archivePathRegex.test(url);
	}

	// 检测当前路径是否为about页面
	function isAboutPath(url: string): boolean {
		const aboutPathRegex = /^\/(\w+\/)?about$/;
		return aboutPathRegex.test(url);
	}

	// 检测当前路径是否为首页
	function isHomePath(url: string): boolean {
		const homePathRegex = /^\/(\w+\/?)?$/;
		return homePathRegex.test(url);
	}

	// 获取archive页面的语言切换URL
	function getArchiveUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/archive";
		}
		return `/${targetLang}/archive`;
	}

	// 获取about页面的语言切换URL
	function getAboutUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/about";
		}
		return `/${targetLang}/about`;
	}

	// 获取首页的语言切换URL
	function getHomeUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/";
		}
		return `/${targetLang}`;
	}

	// 获取通用页面的语言切换URL（确保不添加非法斜杠）
	function getUniversalLanguageSwitchUrl(currentUrl: string, targetLang: string): string {
		const currentLang = extractLangFromUrl(currentUrl);
		
		// 移除当前语言前缀，获取纯净的路径
		let cleanUrl = currentUrl;
		if (!isDefaultLanguage(currentLang)) {
			cleanUrl = currentUrl.replace(new RegExp(`^\/${currentLang}(?:\/|$)`), "/");
		}
		
		// 移除末尾的斜杠（如果存在且不是根路径）
		if (cleanUrl !== "/" && cleanUrl.endsWith("/")) {
			cleanUrl = cleanUrl.slice(0, -1);
		}
		
		// 检查不同页面类型并生成相应的URL
		if (isPostsPath(cleanUrl)) {
			return getPostsSameLangTextUrl(currentUrl, targetLang);
		} else if (isArchivePath(cleanUrl)) {
			return getArchiveUrlWithLang(targetLang);
		} else if (isAboutPath(cleanUrl)) {
			return getAboutUrlWithLang(targetLang);
		} else if (isHomePath(cleanUrl)) {
			return getHomeUrlWithLang(targetLang);
		} else {
			// 对于其他页面，使用现有的语言切换逻辑
			if (isDefaultLanguage(targetLang)) {
				return cleanUrl;
			} else {
				return `/${targetLang}${cleanUrl}`;
			}
		}
	}

	// 安全的URL路径处理函数，确保不添加非法的尾随斜杠
	function sanitizeUrlPath(path: string): string {
		// 移除多余的斜杠
		path = path.replace(/\/+/g, "/");
		
		// 如果不是根路径，移除尾随斜杠
		if (path !== "/" && path.endsWith("/")) {
			path = path.slice(0, -1);
		}
		
		// 确保路径以斜杠开头
		if (!path.startsWith("/")) {
			path = "/" + path;
		}
		
		return path;
	}

	// Cookie 工具函数
	function setCookie(name: string, value: string, days: number = 365) {
		const expires = new Date();
		expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
		document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
	}

	function getCookie(name: string): string | null {
		const nameEQ = name + "=";
		const ca = document.cookie.split(';');
		for (let i = 0; i < ca.length; i++) {
			let c = ca[i];
			while (c.charAt(0) === ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	// 显示和隐藏面板的函数
	function showPanel() {
		const panel = document.querySelector("#lang-dropdown");
		if (panel) {
			panel.classList.remove("hidden");
			panel.classList.remove("float-panel-closed");
		}
	}

	function hidePanel() {
		const panel = document.querySelector("#lang-dropdown");
		if (panel) {
			panel.classList.add("float-panel-closed");
			// 延迟添加hidden类，让动画完成
			setTimeout(() => {
				panel.classList.add("hidden");
			}, 150);
		}
	}

	// 获取浏览器首选语言的函数
	function getBrowserPreferredLanguage(): string {
		let supportedLangs: string[];
		try {
			const dataElement = document.getElementById('supported-langs-data');
			const textContent = dataElement?.textContent?.trim();
			if (textContent && textContent !== '') {
				supportedLangs = JSON.parse(textContent);
			} else {
				supportedLangs = ['zh_cn', 'en'];
			}
		} catch (error) {
			console.warn('Failed to parse supported languages data, using default:', error);
			supportedLangs = ['zh_cn', 'en'];
		}
		const browserLangs = navigator.languages || [navigator.language];
		
		for (const browserLang of browserLangs) {
			const normalizedLang = browserLang.toLowerCase().replace('-', '_');
			
			// 繁体中文（港澳台）映射到简体中文
			if (normalizedLang === 'zh_tw' || normalizedLang === 'zh_hk' || normalizedLang === 'zh_mo') {
				return 'zh_cn';
			}
			
			if (supportedLangs.includes(normalizedLang)) {
				return normalizedLang;
			}
			// 尝试匹配语言的主要部分（如 en-US -> en）
			const mainLang = normalizedLang.split('_')[0];
			if (supportedLangs.includes(mainLang)) {
				return mainLang;
			}
		}
		
		return 'en'; // 默认语言改为英文
	}

	// 检查是否是有效的页面路径
	function isValidPagePath(path: string): boolean {
		// 移除语言前缀进行检查
		const pathWithoutLang = path.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, '/');
		
		// 定义有效的页面路径模式
		const validPaths = [
			'/', // 首页
			'/about', // 关于页面
			'/archive', // 归档页面
			/^\/posts\/.+$/, // 文章页面
			/^\/archive\/category\/.+$/, // 分类页面
			/^\/archive\/tag\/.+$/, // 标签页面
			/^\/\d+$/ // 分页页面
		];
		
		// 检查路径是否匹配有效模式
		return validPaths.some(pattern => {
			if (typeof pattern === 'string') {
				return pathWithoutLang === pattern;
			} else {
				return pattern.test(pathWithoutLang);
			}
		});
	}
	
	// 检查语言偏好的函数
	function checkLanguagePreference() {
		const currentPath = window.location.pathname;
		
		// 如果是404页面或无效页面路径，不执行自动重定向
		if (currentPath === '/404' || currentPath === '/404/' || !isValidPagePath(currentPath)) {
			return;
		}
		
		const savedLang = getCookie('preferred-language');
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn'; // 默认语言
		
		let targetLang = savedLang;
		
		// 如果没有保存的语言偏好，检测浏览器语言
		if (!savedLang) {
			const browserLang = getBrowserPreferredLanguage();
			// 只有当浏览器语言与当前语言不同时才重定向
			if (browserLang !== currentLang) {
				targetLang = browserLang;
				// 保存浏览器检测到的语言偏好
				setCookie('preferred-language', browserLang);
			}
		}
		
		// 如果有目标语言且与当前语言不同，则重定向
		if (targetLang && targetLang !== currentLang) {
			// 构建新的URL
			let newPath;
			if (targetLang === 'zh_cn') {
				// 切换到默认语言，移除语言前缀
				newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, '/');
				if (newPath === '/' && currentLangMatch && currentPath !== `/${currentLangMatch[1]}` && currentPath !== `/${currentLangMatch[1]}/`) {
					newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?/i, '');
				}
			} else {
				// 切换到其他语言
				if (currentLangMatch) {
					// 替换现有语言前缀
					if (currentPath === `/${currentLangMatch[1]}` || currentPath === `/${currentLangMatch[1]}/`) {
						// 如果是语言根路径，直接返回目标语言前缀，避免尾随斜杠
						newPath = `/${targetLang}`;
					} else {
						// 替换语言前缀
						newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, `/${targetLang}/`);
						if (newPath === `/${targetLang}/`) {
							newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?/i, `/${targetLang}`);
						}
					}
				} else {
					// 添加语言前缀
					if (currentPath === '/') {
						// 如果是根路径，直接返回语言前缀，避免尾随斜杠
						newPath = `/${targetLang}`;
					} else {
						newPath = `/${targetLang}${currentPath}`;
					}
				}
			}
			
			// 使用replace保持路由记录
			window.location.replace(newPath);
			return;
		}
	}

	// 更新语言文本的函数
	function updateLanguageText(lang: string) {
		// 定义翻译映射
		const langNames: { [key: string]: string } = {
			'zh_cn': '中文',
			'en': 'English',
			'ja': '日本語',
			'ru': 'Русский'
		};
		
		const currentTranslation = langNames[lang] || langNames['zh_cn'];
		
		// 更新触发按钮显示的语言
		const langTrigger = document.getElementById('lang-trigger');
		if (langTrigger) {
			const langText = langTrigger.querySelector('.lang-text');
			if (langText) {
				langText.textContent = currentTranslation;
			}
		}
	}

	// 更新语言选择器状态的函数
	function updateLanguageState() {
		const currentPath = window.location.pathname;
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn';
		
		// 更新语言选项的激活状态
		const langOptions = document.querySelectorAll('#lang-dropdown a[data-lang-switch]');
		langOptions.forEach(option => {
			const optionLang = option.getAttribute('data-lang-switch');
			const linkElement = option as HTMLElement;
			
			if (optionLang === currentLang) {
				// 激活当前语言选项
				linkElement.classList.add('text-[var(--primary)]', 'font-medium');
				linkElement.classList.remove('text-black/60', 'dark:text-white/60');
			} else {
				// 取消激活其他语言选项
				linkElement.classList.remove('text-[var(--primary)]', 'font-medium');
				linkElement.classList.add('text-black/60', 'dark:text-white/60');
			}
		});
	}

	// 更新下拉框显示状态的函数
	function updateDropdownState() {
		const currentPath = window.location.pathname;
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn';
		
		// 更新语言文本和状态
		updateLanguageText(currentLang);
		updateLanguageState();
	}
	
	// 页面加载时检查语言偏好并设置事件监听器
	document.addEventListener('DOMContentLoaded', () => {
		checkLanguagePreference();
		updateDropdownState();
		
		const langTrigger = document.getElementById('lang-trigger');
		const langSwitcher = document.getElementById('global-language-switcher');
		const langDropdown = document.getElementById('lang-dropdown');
		
		if (langTrigger && langSwitcher && langDropdown) {
			// 检测是否为触摸设备
			const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
			
			if (isTouchDevice) {
				// 移动设备：使用点击事件
				langTrigger.addEventListener('click', (e) => {
					e.preventDefault();
					e.stopPropagation();
					const isVisible = !langDropdown.classList.contains('hidden');
					if (isVisible) {
						hidePanel();
					} else {
						showPanel();
					}
				});
				
				// 点击其他地方关闭面板
				document.addEventListener('click', (e) => {
					if (!langSwitcher.contains(e.target as Node)) {
						hidePanel();
					}
				});
			} else {
				// 桌面设备：使用鼠标悬停事件
				langTrigger.addEventListener('mouseenter', showPanel);
				langSwitcher.addEventListener('mouseleave', hidePanel);
			}
		}
	});
	
	// 监听语言变化事件，更新UI状态
	window.addEventListener('languageChanged', (event: any) => {
		if (event.detail && event.detail.lang) {
			updateLanguageText(event.detail.lang);
			updateLanguageState();
		} else {
			updateDropdownState();
		}
	});
	
	// 检查URL是否存在的函数
	async function checkUrlExists(url: string): Promise<boolean> {
		try {
			const response = await fetch(url, { method: 'HEAD' });
			return response.ok;
		} catch {
			return false;
		}
	}

	// 获取回退URL的函数
	function getFallbackUrl(targetLang: string, currentUrl: string): string {
		// 检查当前URL类型并提供相应的回退
		if (currentUrl.includes('/posts/')) {
			// 文章页面回退到归档页面
			if (targetLang === 'zh_cn') {
				return '/archive';
			}
			return `/${targetLang}/archive`;
		} else if (currentUrl.includes('/archive/category/')) {
			// 分类页面回退到归档页面
			if (targetLang === 'zh_cn') {
				return '/archive';
			}
			return `/${targetLang}/archive`;
		} else if (currentUrl.includes('/archive/tag/')) {
			// 标签页面回退到归档页面
			if (targetLang === 'zh_cn') {
				return '/archive';
			}
			return `/${targetLang}/archive`;
		} else if (currentUrl.includes('/about')) {
			// 关于页面保持在关于页面
			if (targetLang === 'zh_cn') {
				return '/about';
			}
			return `/${targetLang}/about`;
		} else if (currentUrl.includes('/archive')) {
			// 归档页面保持在归档页面
			if (targetLang === 'zh_cn') {
				return '/archive';
			}
			return `/${targetLang}/archive`;
		} else {
			// 其他页面回退到首页
			if (targetLang === 'zh_cn') {
				return '/';
			}
			return `/${targetLang}`;
		}
	}

	// 处理语言切换点击事件
	document.addEventListener('click', async (e) => {
		const target = e.target as HTMLElement;
		const langLink = target.closest('a[data-lang-switch]') as HTMLAnchorElement;
		if (langLink) {
				e.preventDefault();
				
				// 在点击事件处理前保存原始路径
				const originalPath = window.location.pathname;
				const selectedLang = langLink.getAttribute('data-lang-switch');
				
				if (selectedLang) {
					// 保存语言偏好到cookie
					setCookie('preferred-language', selectedLang);
					
					// 触发语言变化事件
					window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang: selectedLang } }));
					
					// 先隐藏下拉面板
					hidePanel();
					
					// 使用新的动态语言切换函数，支持异步文章存在性检查
					try {
						// 使用switchLanguageWithFallback函数，它会自动处理文章存在性检查和回退逻辑
						const targetUrl = await switchLanguageWithFallback(selectedLang, originalPath);
						
						// 使用Swup导航避免页面重载
						if (window.swup) {
							window.swup.navigate(targetUrl);
						} else {
							// 降级方案：如果Swup不可用，使用传统跳转
						window.location.replace(targetUrl);
					}
				} catch (error) {
					console.error('[GlobalLanguageSwitcher] Language switch failed:', error);
					// 错误回退：使用基本的动态语言切换
					console.log('[GlobalLanguageSwitcher] Using fallback URL generation');
					const fallbackUrl = getDynamicLanguageSwitchUrl(selectedLang);
					console.log('[GlobalLanguageSwitcher] Fallback URL:', fallbackUrl);
					if (window.swup) {
						console.log('[GlobalLanguageSwitcher] Using Swup for fallback navigation');
						window.swup.navigate(fallbackUrl);
					} else {
						console.log('[GlobalLanguageSwitcher] Using traditional navigation for fallback');
						window.location.replace(fallbackUrl);
					}
				}
			} else {
				console.warn('[GlobalLanguageSwitcher] No href or selected language found');
			}
		} else {
			console.warn('[GlobalLanguageSwitcher] No language link found in click target');
		}
	});
</script>

<style>
	.active-lang {
		color: var(--primary) !important;
		font-weight: 500 !important;
		background-color: var(--btn-plain-bg-hover) !important;
	}
</style>