---
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import {
	getDynamicLanguageSwitchUrl,
	getLanguageName,
	getLanguageSwitchUrl,
	getPostsSameLangTextUrl,
	getUniversalLanguageSwitchUrl,
	isAboutPath,
	isArchivePath,
	isHomePath,
	isPostsPath,
	switchLanguageWithFallback,
} from "@utils/i18n-utils";
import { Icon } from "astro-icon/components";
import { siteConfig } from "@/config";
import { type NavBarLink } from "../../types/config";
import { url } from "../../utils/url-utils";

interface Props {
	links: NavBarLink[];
}

const links = Astro.props.links;
const currentPath = Astro.url.pathname;

// 从URL中提取当前语言
function getCurrentLanguage(path: string): string {
	const match = path.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
	if (match && siteConfig.supportedLangs?.includes(match[1])) {
		return match[1];
	}
	return siteConfig.defaultLang || "zh_cn";
}

const currentLang = getCurrentLanguage(currentPath);
const supportedLangs = siteConfig.supportedLangs || ["zh_cn", "en"];
const shouldShowLangSwitcher =
	siteConfig.showLanguageSwitcher && supportedLangs.length > 1;
---
<div id="nav-menu-panel" class:list={["float-panel float-panel-closed absolute transition-all fixed right-4 px-2 py-2"]}>
    {links.map((link) => (
        <a href={link.external ? link.url : url(link.url)} class="group flex justify-between items-center py-2 pl-3 pr-1 gap-8
            hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)] transition
        "
           target={link.external ? "_blank" : null}
        >
            <div class="transition text-black/75 dark:text-white/75 font-bold group-hover:text-[var(--primary)] group-active:text-[var(--primary)]">
                {link.name}
            </div>
            {!link.external && <Icon name="material-symbols:chevron-right-rounded"
                  class="transition text-[1.25rem] text-[var(--primary)]"
            />}
            {link.external && <Icon name="fa6-solid:arrow-up-right-from-square"
                  class="transition text-[0.75rem] text-black/25 dark:text-white/25 -translate-x-1"
            />}
        </a>
    ))}
    
    {shouldShowLangSwitcher && (
        <div class="border-t border-[var(--line-divider)] mt-2 pt-2">
            <div class="text-black/50 dark:text-white/50 text-sm font-medium px-3 py-1">
                <Icon name="fa6-solid:language" class="inline mr-2" />
                {i18n(I18nKey.language, currentLang)}
            </div>
            {supportedLangs.map(lang => {
                const isActive = lang === currentLang;
                return (
                    <a href="#" class:list={[
                        "group flex justify-between items-center py-2 pl-6 pr-1 gap-8",
                        "hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)] transition",
                        { "bg-[var(--btn-plain-bg-hover)]": isActive }
                    ]} data-lang-switch={lang}>
                        <div class:list={[
                            "transition font-medium",
                            isActive ? "text-[var(--primary)]" : "text-black/60 dark:text-white/60 group-hover:text-[var(--primary)] group-active:text-[var(--primary)]"
                        ]}>
                            {getLanguageName(lang)}
                        </div>
                        {isActive && <Icon name="material-symbols:check" class="text-[1rem] text-[var(--primary)]" />}
                    </a>
                );
            })}
        </div>
    )}
</div>

<script>
	// 导入需要的函数（客户端版本）
	import { getDynamicLanguageSwitchUrl, switchLanguageWithFallback } from "@utils/i18n-utils";

	// Posts路径检测和同语言跳转函数
	function isPostsPath(url: string): boolean {
		// 使用正则表达式匹配包含posts的路径
		// 匹配 /posts/... 或 /lang/posts/... 格式
		const postsPathRegex = /^\/(\w+\/)?posts\//;
		return postsPathRegex.test(url);
	}

	function extractLangFromUrl(url: string): string {
		const supportedLangs = ['zh_cn', 'en', 'ja', 'ko', 'es', 'th', 'vi', 'id', 'tr', 'zh_tw', 'ru'];
		const match = url.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		if (match && supportedLangs.includes(match[1])) {
			return match[1];
		}
		return 'zh_cn'; // 默认语言
	}

	function isDefaultLanguage(lang: string): boolean {
		return lang === 'zh_cn';
	}

	function getPostUrl(slug: string, lang?: string): string {
		// 清理slug，移除文件扩展名和语言后缀
		let cleanSlug = slug;
		// 移除 .md, .en.md 等扩展名
		cleanSlug = cleanSlug.replace(/\.(\w+\.)?md$/, "");
		// 移除 index.en, index.zh_cn 等文件名
		cleanSlug = cleanSlug.replace(/\/index(\.\w+)?$/, "");

		// 通用的语言后缀清理逻辑
		const supportedLangs = ['en', 'ja', 'ko', 'es', 'th', 'vi', 'id', 'tr', 'zh_tw', 'ru'];
		for (const supportedLang of supportedLangs) {
			// 移除形如 indexen, indexja, guideen, guideja 等语言后缀
			cleanSlug = cleanSlug.replace(
				new RegExp(`(index|[^/]+)(${supportedLang})$`, "i"),
				"$1",
			);
		}

		// 移除形如 indexru, guideen 等剩余的语言后缀（通用模式）
		cleanSlug = cleanSlug.replace(/index[a-z]{2}$/i, "");
		// 移除末尾的 /index
		cleanSlug = cleanSlug.replace(/\/index$/, "");
		// 如果整个 slug 就是 index，则设为空字符串
		if (cleanSlug === "index") {
			cleanSlug = "";
		}
		// 移除开头和结尾的斜杠
		cleanSlug = cleanSlug.replace(/^\/+|\/+$/g, "");

		// 根据语言参数生成URL
		if (!lang || isDefaultLanguage(lang)) {
			return `/posts/${cleanSlug}`;
		}

		return `/${lang}/posts/${cleanSlug}`;
	}

	function getPostsSameLangTextUrl(currentUrl: string, targetLang: string): string {
		// 提取当前语言和文章slug
		const currentLang = extractLangFromUrl(currentUrl);
		
		// 移除当前语言前缀，获取纯净的路径
		let cleanUrl = currentUrl;
		if (!isDefaultLanguage(currentLang)) {
			cleanUrl = currentUrl.replace(new RegExp(`^\/${currentLang}(?:\/|$)`), "/");
		}
		
		// 确保是posts路径
		if (!isPostsPath(cleanUrl)) {
			// 如果不是posts路径，回退到原有逻辑
			return cleanUrl;
		}
		
		// 提取文章slug
		const slugMatch = cleanUrl.match(/^\/posts\/(.+)$/);
		if (!slugMatch) {
			// 如果无法提取slug，回退到归档页面
			return targetLang === 'zh_cn' ? '/archive' : `/${targetLang}/archive`;
		}
		
		const slug = slugMatch[1];
		
		// 构建目标语言的文章URL
		return getPostUrl(slug, targetLang);
	}

	// 检测当前路径是否为archive页面
	function isArchivePath(url: string): boolean {
		const archivePathRegex = /^\/(\w+\/)?archive$/;
		return archivePathRegex.test(url);
	}

	// 检测当前路径是否为about页面
	function isAboutPath(url: string): boolean {
		const aboutPathRegex = /^\/(\w+\/)?about$/;
		return aboutPathRegex.test(url);
	}

	// 检测当前路径是否为首页
	function isHomePath(url: string): boolean {
		const homePathRegex = /^\/(\w+\/?)?$/;
		return homePathRegex.test(url);
	}

	// 获取archive页面的语言切换URL
	function getArchiveUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/archive";
		}
		return `/${targetLang}/archive`;
	}

	// 获取about页面的语言切换URL
	function getAboutUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/about";
		}
		return `/${targetLang}/about`;
	}

	// 获取首页的语言切换URL
	function getHomeUrlWithLang(targetLang: string): string {
		if (isDefaultLanguage(targetLang)) {
			return "/";
		}
		return `/${targetLang}`;
	}

	// 获取通用页面的语言切换URL（确保不添加非法斜杠）
	function getUniversalLanguageSwitchUrl(currentUrl: string, targetLang: string): string {
		const currentLang = extractLangFromUrl(currentUrl);
		
		// 移除当前语言前缀，获取纯净的路径
		let cleanUrl = currentUrl;
		if (!isDefaultLanguage(currentLang)) {
			cleanUrl = currentUrl.replace(new RegExp(`^\/${currentLang}(?:\/|$)`), "/");
		}
		
		// 移除末尾的斜杠（如果存在且不是根路径）
		if (cleanUrl !== "/" && cleanUrl.endsWith("/")) {
			cleanUrl = cleanUrl.slice(0, -1);
		}
		
		// 检查不同页面类型并生成相应的URL
		if (isPostsPath(cleanUrl)) {
			return getPostsSameLangTextUrl(currentUrl, targetLang);
		} else if (isArchivePath(cleanUrl)) {
			return getArchiveUrlWithLang(targetLang);
		} else if (isAboutPath(cleanUrl)) {
			return getAboutUrlWithLang(targetLang);
		} else if (isHomePath(cleanUrl)) {
			return getHomeUrlWithLang(targetLang);
		} else {
			// 对于其他页面，使用现有的语言切换逻辑
			if (isDefaultLanguage(targetLang)) {
				return cleanUrl;
			} else {
				return `/${targetLang}${cleanUrl}`;
			}
		}
	}

	// 安全的URL路径处理函数，确保不添加非法的尾随斜杠
	function sanitizeUrlPath(path: string): string {
		// 移除多余的斜杠
		path = path.replace(/\/+/g, "/");
		
		// 如果不是根路径，移除尾随斜杠
		if (path !== "/" && path.endsWith("/")) {
			path = path.slice(0, -1);
		}
		
		// 确保路径以斜杠开头
		if (!path.startsWith("/")) {
			path = "/" + path;
		}
		
		return path;
	}

	// Cookie 工具函数
	function setCookie(name: string, value: string, days: number = 365) {
		const expires = new Date();
		expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
		document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/`;
	}

	function getCookie(name: string): string | null {
		const nameEQ = name + "=";
		const ca = document.cookie.split(';');
		for (let i = 0; i < ca.length; i++) {
			let c = ca[i];
			while (c.charAt(0) === ' ') c = c.substring(1, c.length);
			if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
		}
		return null;
	}

	// 获取浏览器首选语言的函数
	function getBrowserPreferredLanguage(): string {
		const supportedLangs = ['zh_cn', 'en']; // NavMenuPanel中使用固定的支持语言列表
		const browserLangs = navigator.languages || [navigator.language];
		
		for (const browserLang of browserLangs) {
			const normalizedLang = browserLang.toLowerCase().replace('-', '_');
			
			// 繁体中文（港澳台）映射到简体中文
			if (normalizedLang === 'zh_tw' || normalizedLang === 'zh_hk' || normalizedLang === 'zh_mo') {
				return 'zh_cn';
			}
			
			if (supportedLangs.includes(normalizedLang)) {
				return normalizedLang;
			}
			// 尝试匹配语言的主要部分（如 en-US -> en）
			const mainLang = normalizedLang.split('_')[0];
			if (supportedLangs.includes(mainLang)) {
				return mainLang;
			}
		}
		
		return 'en'; // 默认语言为英文
	}

	// 检查是否是有效的页面路径
	function isValidPagePath(path: string): boolean {
		// 移除语言前缀进行检查
		const pathWithoutLang = path.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, '/');
		
		// 定义有效的页面路径模式
		const validPaths = [
			'/', // 首页
			'/about', // 关于页面
			'/archive', // 归档页面
			/^\/posts\/.+$/, // 文章页面
			/^\/archive\/category\/.+$/, // 分类页面
			/^\/archive\/tag\/.+$/, // 标签页面
			/^\/\d+$/ // 分页页面
		];
		
		// 检查路径是否匹配有效模式
		return validPaths.some(pattern => {
			if (typeof pattern === 'string') {
				return pathWithoutLang === pattern;
			} else {
				return pattern.test(pathWithoutLang);
			}
		});
	}
	
	// 检查语言偏好的函数
	function checkLanguagePreference() {
		const currentPath = window.location.pathname;
		
		// 如果是404页面或无效页面路径，不执行自动重定向
		if (currentPath === '/404' || currentPath === '/404/' || !isValidPagePath(currentPath)) {
			return;
		}
		
		const savedLang = getCookie('preferred-language');
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn'; // 默认语言
		
		let targetLang = savedLang;
		
		// 如果没有保存的语言偏好，检测浏览器语言
		if (!savedLang) {
			const browserLang = getBrowserPreferredLanguage();
			// 只有当浏览器语言与当前语言不同时才重定向
			if (browserLang !== currentLang) {
				targetLang = browserLang;
				// 保存浏览器检测到的语言偏好
				setCookie('preferred-language', browserLang);
			}
		}
		
		// 如果有目标语言且与当前语言不同，则重定向
		if (targetLang && targetLang !== currentLang) {
			// 构建新的URL
			let newPath;
			if (targetLang === 'zh_cn') {
				// 切换到默认语言，移除语言前缀
				newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, '/');
				if (newPath === '/' && currentLangMatch && currentPath !== `/${currentLangMatch[1]}` && currentPath !== `/${currentLangMatch[1]}/`) {
					newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?/i, '');
				}
			} else {
				// 切换到其他语言
				if (currentLangMatch) {
					// 替换现有语言前缀
					if (currentPath === `/${currentLangMatch[1]}` || currentPath === `/${currentLangMatch[1]}/`) {
						// 如果是语言根路径，直接返回目标语言前缀，避免尾随斜杠
						newPath = `/${targetLang}`;
					} else {
						// 替换语言前缀
						newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?(?:\/|$)/i, `/${targetLang}/`);
						if (newPath === `/${targetLang}/`) {
							newPath = currentPath.replace(/^\/[a-z]{2}(?:_[a-z]{2})?/i, `/${targetLang}`);
						}
					}
				} else {
					// 添加语言前缀
					if (currentPath === '/') {
						// 如果是根路径，直接返回语言前缀，避免尾随斜杠
						newPath = `/${targetLang}`;
					} else {
						newPath = `/${targetLang}${currentPath}`;
					}
				}
			}
			
			// 使用replace保持路由记录
			window.location.replace(newPath);
			return;
		}
	}

	// 更新导航菜单中语言文本的函数
	function updateNavMenuLanguageText(lang: string) {
		// 定义翻译映射
		const translations = {
			'zh_cn': '语言',
			'en': 'Language',
			'ja': '言語',
			'ru': 'Язык'
		};
		
		const currentTranslation = translations[lang as keyof typeof translations] || translations['zh_cn'];
		
		// 更新语言标题文本
		const languageTitle = document.querySelector('#nav-menu-panel .text-black\\/50');
		if (languageTitle) {
			// 清除所有文本内容，保留图标
			const icon = languageTitle.querySelector('svg');
			languageTitle.innerHTML = '';
			
			// 重新添加图标和文本
			if (icon) {
				languageTitle.appendChild(icon);
			}
			languageTitle.appendChild(document.createTextNode(currentTranslation));
		}
	}

	// 更新导航菜单中语言选择器状态的函数
	function updateNavMenuLanguageState() {
		const currentPath = window.location.pathname;
		const currentLangMatch = currentPath.match(/^\/([a-z]{2}(?:_[a-z]{2})?)(?:\/|$)/i);
		const currentLang = currentLangMatch ? currentLangMatch[1] : 'zh_cn';
		
		// 更新导航菜单中语言选项的激活状态
		const langOptions = document.querySelectorAll('#nav-menu-panel a[data-lang-switch]');
		langOptions.forEach(option => {
			const optionLang = option.getAttribute('data-lang-switch');
			const linkElement = option as HTMLElement;
			
			if (optionLang === currentLang) {
				// 激活当前语言选项
				linkElement.classList.add('bg-[var(--btn-plain-bg-hover)]');
				const textDiv = linkElement.querySelector('div');
				if (textDiv) {
					textDiv.classList.remove('text-black/60', 'dark:text-white/60', 'group-hover:text-[var(--primary)]', 'group-active:text-[var(--primary)]');
					textDiv.classList.add('text-[var(--primary)]');
				}
				// 如果图标不存在，创建并添加图标
				let checkIcon = linkElement.querySelector('svg');
				if (!checkIcon) {
					// 创建图标元素
					checkIcon = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
					checkIcon.setAttribute('class', 'text-[1rem] text-[var(--primary)]');
					checkIcon.setAttribute('width', '1em');
					checkIcon.setAttribute('height', '1em');
					checkIcon.setAttribute('viewBox', '0 0 24 24');
					checkIcon.innerHTML = '<path fill="currentColor" d="M9 16.17L4.83 12l-1.42 1.41L9 19L21 7l-1.41-1.41z"/>';
					linkElement.appendChild(checkIcon);
				}
			} else {
				// 取消激活其他语言选项
				linkElement.classList.remove('bg-[var(--btn-plain-bg-hover)]');
				const textDiv = linkElement.querySelector('div');
				if (textDiv) {
					textDiv.classList.remove('text-[var(--primary)]');
					textDiv.classList.add('text-black/60', 'dark:text-white/60', 'group-hover:text-[var(--primary)]', 'group-active:text-[var(--primary)]');
				}
				// 移除选中图标
				const checkIcon = linkElement.querySelector('svg');
				if (checkIcon) {
					checkIcon.remove();
				}
			}
		});
	}
	
	// 页面加载时更新状态
	document.addEventListener('DOMContentLoaded', () => {
		checkLanguagePreference();
		updateNavMenuLanguageState();
	});
	
	// 监听语言变化事件，更新UI状态
	window.addEventListener('languageChanged', (event: any) => {
		if (event.detail && event.detail.lang) {
			updateNavMenuLanguageText(event.detail.lang);
			updateNavMenuLanguageState();
		}
	});
	
	// 处理移动端菜单的语言切换
	document.addEventListener('click', async (e) => {
		const target = e.target as HTMLElement;
		const langLink = target.closest('a[data-lang-switch]') as HTMLAnchorElement;
		
		if (langLink) {
			e.preventDefault();
			
			// 在点击事件处理前保存原始路径
			const originalPath = window.location.pathname;
			const selectedLang = langLink.getAttribute('data-lang-switch');
			
			if (selectedLang) {
				// 保存语言偏好到cookie
				setCookie('preferred-language', selectedLang);
				
				// 触发语言变化事件
				window.dispatchEvent(new CustomEvent('languageChanged', { detail: { lang: selectedLang } }));
				
				// 使用新的动态语言切换函数
				try {
					const targetUrl = await switchLanguageWithFallback(selectedLang, originalPath);
					
					// 使用Swup导航避免页面重载
					if (window.swup) {
						window.swup.navigate(targetUrl);
					} else {
						window.location.replace(targetUrl);
					}
				} catch (error) {
					// 降级方案：直接跳转到首页
					const fallbackUrl = selectedLang === 'zh_cn' ? '/' : `/${selectedLang}`;
					if (window.swup) {
						window.swup.navigate(fallbackUrl);
					} else {
						window.location.replace(fallbackUrl);
					}
				}
			}
		}
	});
</script>
