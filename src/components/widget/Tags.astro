---
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";
import { getTagList } from "../../utils/content-utils";
import { getTagUrlWithLang } from "../../utils/i18n-utils";
import ButtonTag from "../control/ButtonTag.astro";
import WidgetLayout from "./WidgetLayout.astro";

interface Props {
	class?: string;
	style?: string;
	lang?: string;
}
const className = Astro.props.class;
const style = Astro.props.style;
const lang = Astro.props.lang;

const tags = await getTagList(lang);

const COLLAPSED_HEIGHT = "7.5rem";

const isCollapsed = tags.length >= 20;
---
<WidgetLayout name={i18n(I18nKey.tags, lang)} id="tags" isCollapsed={isCollapsed} collapsedHeight={COLLAPSED_HEIGHT} class={className} style={style}>
    <div class="flex gap-2 flex-wrap">
        {tags.map(t => (
            <ButtonTag href={getTagUrlWithLang(t.name, lang)} label={`View all posts with the ${t.name.trim()} tag`}>
                {t.name.trim()}
            </ButtonTag>
        ))}
    </div>
</WidgetLayout>

<script>
// 更新标签控件标题的函数
function updateTagsTitle(lang: string) {
    // 定义翻译映射
    const translations = {
        'zh_cn': '标签',
        'en': 'Tags',
        'ja': 'タグ',
        'ru': 'Теги'
    };
    
    const currentTranslation = translations[lang as keyof typeof translations] || translations['zh_cn'];
    
    // 更新标签控件的标题
    const tagsWidget = document.querySelector('widget-layout[data-id="tags"]');
    if (tagsWidget) {
        const titleElement = tagsWidget.querySelector('div.font-bold');
        if (titleElement) {
            titleElement.textContent = currentTranslation;
        }
    }
}

// 监听语言变化事件
function setupTagsLanguageListener() {
    window.addEventListener('languageChanged', (event: any) => {
        if (event.detail && event.detail.lang) {
            updateTagsTitle(event.detail.lang);
        }
    });
}

// 页面加载时设置监听器
document.addEventListener('DOMContentLoaded', () => {
    setupTagsLanguageListener();
});
</script>